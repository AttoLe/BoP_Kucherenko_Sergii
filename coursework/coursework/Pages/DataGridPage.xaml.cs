using System;
using System.Collections.Generic;
using System.Data;
using System.Windows;
using System.Windows.Controls;
using coursework.Addons;

namespace coursework.Pages;

public partial class DataGridPage : Page
{
    private readonly string _com;
    private readonly string _customName;
    private readonly List<string> _names;
    private DataGrid _dg;

    public DataGridPage(string type)
    {
        InitializeComponent();

        string title;

        switch (type)
        {
            case "UpdateTeamData":
                _names = new List<string>
                {
                    "№", "team name", "coach name", "coach surname",
                    "coach lastname", "city name", "last results", "choice"
                };
                _customName = "change";
                title = "ChooseTeamWindow";
                _com = "select * from dbo.get_all_team_detailed;";
                TableType1((1, 1), (5, 5), CreateTeamColumns);
                break;

            case "UpdateTeamRoster":
                _names = new List<string>
                {
                    "№", "team name", "city name", "last results", "amount of players", "playability", "choice"
                };
                _customName = "choose";
                title = "ChooseTeamRoasterWindow";
                _com = "select * from dbo.get_all_team_to_roaster;";
                TableType1((1, 1), (5, 4), CreateTeamRoasterColumns);
                break;

            case "ChooseTeam":
                _names = new List<string>
                {
                    "№", "team name", "city name", "last results", "players", "playability", "check"
                };
                _customName = "start";
                title = "ChooseTeamWindow";
                ChooseTeam();
                break;

            default:
                _names = new List<string>
                {
                    "№", "player name", "player surname", "player lastname",
                    "player role", "player bd", "number", "choice"
                };
                _customName = "change";
                _com = $"select * from dbo.get_all_player_by_team ({Convert.ToInt32(type)});";
                title = "ChoosePLayerWindow";
                UpdatePlayerData(Convert.ToInt32(type));
                break;
        }
        Title.Content = title;
    }

    #region UpdateTeamData
    
    private void CreateTeamColumns()
    {
        CreateButtonColumn((sender, args) => { ChangeTeamData_Clicked(); });
        CreateStandardColumns();
    }

    private void ChangeTeamData_Clicked() => MainWindow.Mainframe.Navigate(
        new InteractTeamMainPage(Convert.ToInt32(Get_Clicked_Column(0)), "UpdateTeamData"));
    #endregion

    #region UpdateTeamRoster
    
    private void CreateTeamRoasterColumns()
    {
        CreateButtonColumn((sender, args) => { ChangeTeamRoaster_Clicked(); });
        CreateStandardColumns();
    }

    private void ChangeTeamRoaster_Clicked() =>
        MainWindow.Mainframe.Navigate(new DataGridPage(Get_Clicked_Column(0).ToString()));
    #endregion

    #region UpdatePlayerData
    
    private void UpdatePlayerData(int idTeam)
    {
        DataTable dt = new DataTable();
        SqlInteraction.FillTable(_com, dt);
        
        CreateDataGrid((1, 1), (5, 3), true);

        Button addplayer = new Button
        {
            Content = "Add Player",
            IsEnabled = dt.Rows.Count < 20
            //style
        };
        grid.LocateOn(addplayer, (1, 5));
        addplayer.Click += (sender, args) => { AddPlayer_Click(idTeam); };

        _dg.AutoGeneratedColumns +=
            (sender, args) => { CreatePLayerColumn(idTeam); };
        _dg.ItemsSource = dt.DefaultView;

        MainWindow.ToPrev.Click += ToTableRosterTeam;
    }
    
    private void CreatePLayerColumn(int idTeam)
    {
        CreateButtonColumn((sender, eventArgs) => ChangePlayer_Clicked(idTeam));
        CreateStandardColumns();
    }

    private void AddPlayer_Click(int idTeam) =>
        MainWindow.Mainframe.Navigate(new InteractTeamMainPage(idTeam, "CreatePlayerData"));

    private void ChangePlayer_Clicked(int idTeam) => 
        MainWindow.Mainframe.Navigate(new InteractTeamMainPage(
            Convert.ToInt32(Get_Clicked_Column(0)), 
            Get_Clicked_Column(5), idTeam));

    private void ToTableRosterTeam(object sender, RoutedEventArgs e)
    {
        MainWindow.Mainframe.Navigate(new DataGridPage("UpdateTeamRoster"));
        MainWindow.ToPrev.Click -= ToTableRosterTeam;
    }
    
    #endregion

    #region ChooseTeam

    private ComboBox _amount;
    private List<int> _teams;
    private TextBlock _info;
    private Button _start;
    private void ChooseTeam()
    {
        _teams = new List<int>();
        
        _amount = new ComboBox
        {
            Items = {"4", "8", "16", "32", "128"},
            SelectedIndex = 2,
            //style
        };
        grid.LocateOn(_amount, (1, 5));

        _info = new TextBlock
        {
            Text = $"0 teams has been chose.\nYou need {_amount.Text} more",
            //style
        };
        grid.LocateOn(_info, (3, 3));
        Grid.SetColumnSpan(_info, 3);
        
        TextBlock data = new TextBlock
        {
            Text = "Choose \nnumber of\n teams",
            //style
        };
        grid.LocateOn(data, (1, 3));
        Grid.SetColumnSpan(data, 2);
        
        _start = new Button
        {
            Content = _customName,
            //style
        };
        grid.LocateOn(_start, (5, 3));
        Grid.SetColumnSpan(_start, 3);
        _start.Click += (sender, args) => start_Click(_teams);
        _start.IsEnabled = false;

        DataTable dt = new DataTable();
        SqlInteraction.FillTable("select * from dbo.get_all_team_to_roaster;", dt);
        
        DataColumn check = new DataColumn("check", typeof(bool));
        check.DefaultValue = false;
        
        dt.Columns.Add(check);
        
        CreateDataGrid((1, 1), (5, 1), false);
        _dg.AutoGeneratedColumns +=
            (sender, args) => { CreateChooseTeamColumns(); };
        _dg.ItemsSource = dt.DefaultView;
        
        _amount.DropDownClosed += (sender, args) => Amount_Changed(_info, _teams, dt);
        
        MainWindow.ToPrev.Click += ToMainPage;
    }
    
    private void Amount_Changed(TextBlock info, List<int> teams, DataTable dt)
    {
        teams.Clear();
        info.Text = $"{teams.Count} teams has been chosen.\nYou need {Convert.ToInt32(_amount.Text) - teams.Count} more";
        _start.IsEnabled = false;
        foreach (DataRow v in dt.Rows) 
            v[6] = false;
    }

    private void CreateChooseTeamColumns()
    {
        CreateStandardColumns();
        
        for (int i = 0; i < _dg.Columns.Count; i++)
            _dg.Columns[i].IsReadOnly = i != 6;
        
        (_dg.Columns[6] as DataGridCheckBoxColumn).ElementStyle =  (Style) FindResource("Check_Click");
    }
    
    private void CB_Clicked(object sender, RoutedEventArgs e)
    {
        var cb = (CheckBox) sender;
        var v = (DataRowView) _dg.CurrentCell.Item;
        var max = Convert.ToInt32(_amount.Text);
        
        if ((bool) cb.IsChecked)
        {
            if(_teams.Count < max)
                _teams.Add((int) v.Row[0]);
            else
            {
                cb.IsChecked = false;
                MessageBox.Show($"It has been already chosen {max} team.\nYou are not allowed to choose more teams");
                return;
            }
        }
        else
        {
            try
            {
                _teams.Remove((int) v.Row[0]);
                _start.IsEnabled = false;
            }
            catch
            {
                return;
            }
        }
        _info.Text = $"{_teams.Count} teams has been chosen.\nYou need {max-_teams.Count} more";
        if (_teams.Count == max)
            _start.IsEnabled = true;
    }

    private void start_Click(List<int> teams) =>
        MainWindow.Mainframe.Navigate(new OrganizeChampPage(teams));

    private void ToMainPage(object sender, RoutedEventArgs e)
    {
        MainWindow.Mainframe.Navigate(new MainPage());
        MainWindow.ToPrev.Click -= ToMainPage;
    }
    #endregion

    #region tools
    
    private void TableType1((int, int) loc, (int, int) span, Action action)
    {
        InitializeComponent();
       
        DataTable dt = new DataTable();
        SqlInteraction.FillTable(_com, dt);

        CreateDataGrid(loc, span, true);

        _dg.AutoGeneratedColumns +=
            (sender, args) => { action(); };
        _dg.ItemsSource = dt.DefaultView;
        
        MainWindow.ToPrev.Click += ToChangeDataMainPage;
    }
    
    private void CreateDataGrid((int, int) loc, (int, int) span, bool untouchable)
    {
        _dg = new DataGrid
        {
            ColumnWidth = DataGridLength.Auto,
            IsReadOnly = untouchable,
            CanUserReorderColumns = false,
            CanUserSortColumns = false,
            CanUserAddRows = false,
            CanUserResizeColumns = false,
            CanUserResizeRows = false,
            CanUserDeleteRows = false
            //that all in style
        };
        grid.LocateOn(_dg, (loc.Item2, loc.Item1));

        Grid.SetRowSpan(_dg, span.Item1);
        Grid.SetColumnSpan(_dg, span.Item2);
    }

    private void CreateButtonColumn(RoutedEventHandler handler)
    {
        FrameworkElementFactory f = new FrameworkElementFactory(typeof(Button));
        f.SetValue(Button.ContentProperty, _customName);
        f.AddHandler(Button.ClickEvent, handler);
        //f.SetValue(Style, );
        DataGridTemplateColumn dcom = new DataGridTemplateColumn
        {
            IsReadOnly = false,
            CellTemplate = new DataTemplate
            {
                VisualTree = f
            }
        }; 
        _dg.Columns.Add(dcom);
    }

    private void CreateStandardColumns()
    {
        for (int i = 0; i < _names.Count; i++)
            _dg.Columns[i].Header = _names[i];
    }

    private string Get_Clicked_Column(int index)
    {
        DataRowView v = (DataRowView) _dg.CurrentCell.Item;
        return v.Row[index].ToString();
    }

    #endregion
   
    private void ToChangeDataMainPage(object sender, RoutedEventArgs e)
    {
        MainWindow.Mainframe.Navigate(new ChangeDataMainPage(new ChangeDataSubPage2()));
        MainWindow.ToPrev.Click -= ToChangeDataMainPage;
    }
}