using System;
using System.Collections.Generic;
using System.Data;
using System.Windows;
using System.Windows.Controls;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using static coursework.MainWindow;

namespace coursework.Addons;

public class DataGridInteraction
{
    public DataGrid dg;
    public DataTable dt;
    private readonly string _com;
    private readonly List<string> _names;
        
    public DataGridInteraction(string com, List<string> names)
    {
        _com = com;
        _names = names.Select(x => " " + x + " ").ToList();
    }
    
    public void TableType1(Grid grid, (int, int) loc, (int, int) span, Action action, bool b)
    {
        dt = new DataTable();
        SqlInteraction.FillTable(_com, dt);
        
        CreateDataGrid(grid, loc, span, b);

        dg.AutoGeneratedColumns += (sender, args) => 
            { action(); };
        dg.ItemsSource = dt.DefaultView;
    }

    private void CreateDataGrid(Grid grid, (int, int) loc, (int, int) span, bool untouchable)
    {
        dg = new DataGrid
        {
            
            IsReadOnly = untouchable,
            CanUserReorderColumns = false,
            CanUserSortColumns = false,
            CanUserAddRows = false,
            CanUserResizeColumns = false,
            CanUserResizeRows = false,
            CanUserDeleteRows = false
        };

        grid.LocateOn(dg, (loc.Item2, loc.Item1));

        Grid.SetRowSpan(dg, span.Item1);
        Grid.SetColumnSpan(dg, span.Item2);
    }

    public void CreateButtonColumn(RoutedEventHandler handler, string customName)
    {
        FrameworkElementFactory f = new FrameworkElementFactory(typeof(Button));
        f.SetValue(Button.ContentProperty, customName);
        f.AddHandler(Button.ClickEvent, handler);
        DataGridTemplateColumn dcom = new DataGridTemplateColumn
        {
            IsReadOnly = false,
            CellTemplate = new DataTemplate
            {
                VisualTree = f
            }
        }; 
        dg.Columns.Add(dcom);
    }

    public void CreateStandardColumns()
    {
        for (int i = 0; i < _names.Count; i++)
            dg.Columns[i].Header = _names[i];
    }

    public T Get_Clicked_Column<T>(int index)
    {
        DataRowView v = (DataRowView) dg.CurrentCell.Item;
        return (T) v.Row[index];
    }

    public int Get_RowCount() => dt.Rows.Count;
}